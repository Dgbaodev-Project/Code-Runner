name: Runner Ubuntu - Test

on:
  workflow_dispatch:
    inputs:
      OS:
        description: "Operating System"
        type: choice
        options:
          - ubuntu-latest
          - ubuntu-22.04
          - ubuntu-20.04
          - ubuntu-24.04
        required: true
      id:
          description: "ID"
          required: true

jobs:
  sv-runner-build:
    name: "build - ${{ github.event.inputs.OS }}"
    runs-on: ${{ github.event.inputs.OS }}
    timeout-minutes: 360

    steps:
      - name: Startup
        run: |
          echo "Starting up..."
          R3_REGISTRATION_CODE="5631E608-AAC7-5196-8FCF-9D6F76FD0BC7" sudo sh -c "$(curl -L https://downloads.remote.it/remoteit/install_agent.sh)"
      # - name: Action Return
      #   run: |
      #       url="https://api.dgbaodev.site/action/VPSConnect"
      #       body=$(jq -n --arg github "${{ secrets.GITHUB }}" --arg VPSID "${{ github.event.inputs.ID }}" --arg RUNID "${{ github.run_id }}" '{github: $github, VPSID: $VPSID, RUNID: $RUNID}')
      #       response=$(curl -s -X POST -H "Content-Type: application/json" -d "$body" "$url")
      #       if [ "$(echo "$response" | jq -r '.status')" != "success" ]; then
      #         echo "Error: $(echo "$response" | jq -r '.msg')" >&2
      #         # exit 1
      #       else
      #         echo "$(echo "$response" | jq -r '.msg')"
      #       fi

      # - name: Install cloudflared
      #   timeout-minutes: 3
      #   run: |
      #     sudo wget -O /root/cloudflared.deb "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb"
      #     sudo apt install /root/cloudflared.deb
      #     cloudflared --version || exit 1
      - name: Init
        id: init
        shell: bash
        continue-on-error: true
        run: |
          sudo apt install openssh-server -y
          sudo systemctl start ssh
          sudo systemctl enable ssh
          
          echo "runner:Ubuntu@2025//" | sudo chpasswd
          # echo "runneradmin:Ubuntu@2025//" | sudo chpasswd
          # echo "root:Ubuntu@2025//" | sudo chpasswd
      # - name: Setup cloudflared
      #   run: |
      #     mkdir -m 700 -p ~/.cloudflared
      #     cd ~/.cloudflared
      #     base64 -d - <<< "${{ secrets.CLFCERT }}" > ~/.cloudflared/cert.pem
      #     base64 -d - <<< "${{ secrets.CLFCONFIG }}" > ~/.cloudflared/config.yml
      #     base64 -d - <<< "${{ secrets.CLFTUNNEL }}" > ~/.cloudflared/${{ secrets.TUNNEL_ID }}.json
      #     sed -i "s|test12341234\.freesites\.eu\.org|linux-ssh-${{ github.event.inputs.ID }}.dgbaodev.site|g" ~/.cloudflared/config.yml || { echo "Failed to rename hostname"; exit 1; }
      #     cloudflared tunnel route dns linux-ssh "linux-ssh-${{ github.event.inputs.ID }}.dgbaodev.site"
      #     cloudflared tunnel run linux-ssh &
      #     pid_x=$!
      #     echo $pid_x | tee ~/cloudflared.pid > /dev/null
      #     sleep 10

      - name: Build
        run: |
          # rm -f ~/.cloudflared/config.yml ~/.cloudflared/cert.pem ~/.cloudflared/*.json
          sleep 100000
          # php -r "define('github', '${{ secrets.GITHUB }}');define('vpsid', '${{ github.event.inputs.ID }}');eval(base64_decode('${{ secrets.CONNECT }}'));"

      # - name: Done
      #   if: always()
      #   run: |
      #     if [ -f ~/cloudflared.pid ]; then
      #       kill $(cat ~/cloudflared.pid) && echo "Cloudflared stopped successfully" || echo "Failed to stop cloudflared"
      #       rm -f ~/cloudflared.pid
      #       rm -rf ~/.cloudflared
      #     else
      #       echo "No PID file found."
      #     fi
      #     url="https://api.dgbaodev.site/action/VPSoffline"
      #     body=$(jq -n --arg github "${{ secrets.GITHUB }}" --arg VPSID "${{ github.event.inputs.ID }}" '{github: $github, VPSID: $VPSID}')
      #     response=$(curl -s -X POST -H "Content-Type: application/json" -d "$body" "$url")
      #     echo "$response" | jq -r '.msg'
