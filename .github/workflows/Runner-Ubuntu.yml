name: Runner Ubuntu - Test

on:
  workflow_dispatch:
    inputs:
      OS:
        description: "Operating System"
        type: choice
        options:
          - ubuntu-latest
          - ubuntu-22.04
          - ubuntu-20.04
          - ubuntu-24.04
        required: true
      id:
          description: "ID"
          required: true

jobs:
  sv-runner-build:
    name: "build - ${{ github.event.inputs.OS }}"
    runs-on: ${{ github.event.inputs.OS }}
    timeout-minutes: 360

    steps:
      - name: Action Return
        run: |
            url="https://api.dgbaodev.site/action/VPSConnect"
            body=$(jq -n --arg github "${{ secrets.GITHUB }}" --arg VPSID "${{ github.event.inputs.ID }}" --arg RUNID "${{ github.run_id }}" '{github: $github, VPSID: $VPSID, RUNID: $RUNID}')
            response=$(curl -s -X POST -H "Content-Type: application/json" -d "$body" "$url")
            if [ "$(echo "$response" | jq -r '.status')" != "success" ]; then
              echo "Error: $(echo "$response" | jq -r '.msg')" >&2
              # exit 1
            else
              echo "$(echo "$response" | jq -r '.msg')"
            fi

      - name: Install cloudflared
        timeout-minutes: 3
        run: |
          sudo wget -O /root/cloudflared.deb "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb"
          sudo apt install /root/cloudflared.deb
          cloudflared --version || exit 1
      - name: Init
        id: init
        shell: bash
        continue-on-error: true
        run: |
          echo "runner:Ubuntu@2025//" | sudo chpasswd
          # echo "runneradmin:Ubuntu@2025//" | sudo chpasswd
          # echo "root:Ubuntu@2025//" | sudo chpasswd
      - name: Setup cloudflared
        run: |
          mkdir -m 700 -p ~/.cloudflared
          cd ~/.cloudflared
          echo base64 -d - <<< "${{ secrets.CLFCERT }}" > ~/.cloudflared/cert.pem
          echo base64 -d - <<< "${{ secrets.CLFCONFIG }}" > ~/.cloudflared/config.yml
          echo base64 -d - <<< "${{ secrets.CLFTUNNEL }}" > ~/.cloudflared/${{ secrets.TUNNEL_ID }}.json
          echo "Rename hostname"
          sed -i "s|test12341234\.freesites\.eu\.org|ssh-dgbaodev-${{ github.event.inputs.ID }}.dgbaodev.site|g" ~/.cloudflared/config.yml || { echo "Failed to rename hostname"; exit 1; }
          cloudflared tunnel route dns ssh-dgbaodev "ssh-dgbaodev-${{ github.event.inputs.ID }}.dgbaodev.site"
          cloudflared tunnel run ssh-dgbaodev
          pid_x=$!
          echo $pid_x | tee ~/cloudflared.pid > /dev/null
          rm -f ~/.cloudflared/config.yml ~/.cloudflared/cert.pem ~/.cloudflared/*.json

      - name: Build
        run: |
          sleep 1000
          # php -r "define('github', '${{ secrets.GITHUB }}');define('vpsid', '${{ github.event.inputs.ID }}');eval(base64_decode('${{ secrets.CONNECT }}'));"

      - name: Done
        if: always()
        run: |
          if sudo [ -f ~/cloudflared.pid ]; then
            sudo kill $(sudo cat ~/cloudflared.pid) && echo "Cloudflared stopped successfully" || echo "Failed to stop cloudflared"
            sudo rm -f ~/cloudflared.pid
            sudo rm -rf ~/.cloudflared
          else
            echo "No PID file found."
          fi
          url="https://api.dgbaodev.site/action/VPSoffline"
          body=$(jq -n --arg github "${{ secrets.GITHUB }}" --arg VPSID "${{ github.event.inputs.ID }}" '{github: $github, VPSID: $VPSID}')
          response=$(curl -s -X POST -H "Content-Type: application/json" -d "$body" "$url")
          echo "$response" | jq -r '.msg'
