name: Runner

on:
  workflow_dispatch:
    inputs:
      OS:
        description: "Operating System"
        type: choice
        options:
          - ubuntu-latest
          - ubuntu-22.04
        required: true
      config:
          description: "Config BASE64"
          required: true

jobs:
  run-script:
    runs-on: ${{ github.event.inputs.OS }}
    name: "Runner Script (${{ github.event.inputs.OS }})"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.RCLONE_CONFIG }}
      - name: Install cloudflared
        shell: bash
        run: |
          sudo wget -O /root/cloudflared.deb "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb"
          sudo apt install /root/cloudflared.deb
          cloudflared --version || exit 1
      - name: Build DGB Reader
        run: |
          sudo g++ -o /usr/bin/dgb-reader "$GITHUB_WORKSPACE/storage/dgb-reader.cpp"
      - name: Init
        id: init
        shell: bash
        continue-on-error: true
        run: |
          sudo mkdir -m 775 -p /input /env /local /output
          sudo chown runner:docker /input /env /local /output
          wget -O /input/config.dgb ${{ github.event.inputs.config }} || true
      - name: Setup cloudflared
        run: |
          echo "Get Files"
          cloudflared_cert=$(dgb-reader cloudflared cert)
          cloudflared_config=$(dgb-reader cloudflared config)
          cloudflared_tunnel=$(dgb-reader cloudflared tunnel)
          
          sudo mkdir -m 700 -p /root/.cloudflared
          rclone copyto "$cloudflared_cert" cert.pem || { echo "Failed to copy cert.pem"; exit 1; }
          rclone copyto "$cloudflared_config" config.yml || { echo "Failed to copy config.yml"; exit 1; }
          rclone copyto "$cloudflared_tunnel" tunnel.json || { echo "Failed to copy tunnel.json"; exit 1; }
          
          sudo mv cert.pem /root/.cloudflared/cert.pem
          sudo mv config.yml /root/.cloudflared/config.yml
          sudo mv tunnel.json "/root/.cloudflared/${{ secrets.TUNNEL_ID }}.json"
          
          sudo rm -f cert.pem config.yml tunnel.json

          [ ! -f "cert.pem" ] && [ ! -f "config.yml" ] && [ ! -f "tunnel.json" ] || { echo "Temporary files were not removed"; exit 1; }

          echo "Rename hostname"
          sudo sed -i "s|test12341234\.freesites\.eu\.org|ws-dgbaodev-$(dgb-reader main id).freesites.eu.org|g" /root/.cloudflared/config.yml || { echo "Failed to rename hostname"; exit 1; }

          echo "Run"
          sudo cloudflared tunnel run websocket-dgbaodev > /dev/null 2>&1 &
          echo $! | sudo tee /root/cloudflared.pid > /dev/null

          sudo chmod 700 -R /root/.cloudflared
          sudo chmod 600 /root/cloudflared.pid

          echo "Waiting for tunnel to start..."
          sleep 5

          if ! sudo sh -c "ps -p \$(cat /root/cloudflared.pid) > /dev/null 2>&1"; then
            echo "Cloudflared tunnel failed to start"; exit 1
          fi
          echo "OK"
      - name: Create user - runner_clone
        run: |
          sudo useradd -m -d /runner runner_clone
          echo 'runner_clone:Runner_clone_0@' | sudo chpasswd
          sudo chmod -R 775 /runner
          sudo chown runner_clone:docker /runner
