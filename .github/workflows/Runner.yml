name: Runner

on:
  workflow_dispatch:
    inputs:
      OS:
        description: "Operating System"
        type: choice
        options:
          - ubuntu-latest
          - ubuntu-22.04
        required: true
      config:
          description: "Config BASE64"
          required: true
      ID:
        description: "ID JOB"
        default: "RANDOM"
        required: false

jobs:
  run-script:
    runs-on: ${{ github.event.inputs.OS }}
    name: "Runner Script (${{ github.event.inputs.OS }}; ${{ github.event.inputs.ID }})"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.RCLONE_CONFIG }}
      - name: Install cloudflared
        shell: bash
        run: |
          sudo apt install -y curl gnupg
          curl -fsSL https://pkg.cloudflare.com/pubkey.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloudflare-main.gpg
          echo "deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflare-main.list
          sudo apt update
          sudo apt install cloudflared
          cloudflared --version || exit 1
      - name: Set ID
        id: set_id
        run: |
          if [ "${{ github.event.inputs.ID }}" == "RANDOM" ]; then
            RANDOM_ID=$(uuidgen)
            echo "ID << RANDOM_ID: $RANDOM_ID"
            echo "JID=$RANDOM_ID" >> $GITHUB_OUTPUT
          else
            echo "ID << INPUT_ID: ${{ github.event.inputs.ID }}"
            echo "JID=${{ github.event.inputs.ID }}" >> $GITHUB_OUTPUT
          fi
      - name: Build DGB Reader
        run: |
          sudo g++ -o /usr/bin/dgb-reader "$GITHUB_WORKSPACE/storage/dgb-reader.cpp"
      - name: Init
        id: init
        shell: bash
        continue-on-error: true
        run: |
          sudo mkdir -m 775 -p /input /env /local /output
          sudo chown runner:docker /input /env /local /output
          wget -O /input/config.dgb ${{ github.event.inputs.config }} || true
      - name: Setup cloudflared
        run: |
          cloudflared_cert=$(dgb-reader cloudflared cert)
          cloudflared_config=$(dgb-reader cloudflared config)
          cloudflared_tunnel=$(dgb-reader cloudflared tunnel)
          sudo mkdir -m 770 -p /root/.cloudflared
          rclone copyto $cloudflared_cert cert.pem
          rclone copyto $cloudflared_config config.yml
          rclone copyto $cloudflared_tunnel tunnel.json
          sudo mv cert.pem /root/.cloudflared/cert.pem
          sudo mv config.yml /root/.cloudflared/config.yml
          sudo mv tunnel.json "/root/.cloudflared/${{ secrets.TUNNEL_ID }}.json"
          sudo rm -rf cert.pem config.yml tunnel.json || true
          if [ -f "cert.pem" ];then exit 1 fi
          if [ -f "config.yml" ];then exit 1 fi
          if [ -f "tunnel.json" ];then exit 1 fi
          sudo cloudflared tunnel run websocket-dgbaodev > /dev/null 2>&1 &
          sudo echo $! > /root/cloudflared.pid
          sleep 5
          chmod 770 -R /root/.cloudflared /root/cloudflared.pid
      - name: Create user - runner_clone
        run: |
          sudo useradd -m -d /runner runner_clone
          echo 'runner_clone:Runner_clone_0@' | sudo chpasswd
          sudo chmod -R 775 /runner
          sudo chown runner_clone:docker /runner
