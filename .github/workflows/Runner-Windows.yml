name: Runner Windows

on:
  workflow_dispatch:
    inputs:
      OS:
        description: "Operating System"
        type: choice
        options:
          - windows-latest
          - windows-2022
        required: true
      config:
        description: "Config BASE64"
        required: true

jobs:
  run-script:
    runs-on: ${{ github.event.inputs.OS }}
    name: "Runner Script (${{ github.event.inputs.OS }})"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.RCLONE_CONFIG }}

      - name: Install cloudflared
        shell: pwsh
        run: |
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          choco install cloudflared -y

      - name: Verify cloudflared
        shell: pwsh
        run: |
          where.exe cloudflared

      - name: Build DGB Reader
        shell: pwsh
        run: |
          g++ -o "C:\dgb-reader.exe" "$env:GITHUB_WORKSPACE\storage\dgb-reader.cpp"

      - name: Init
        id: init
        shell: pwsh
        continue-on-error: true
        run: |
          New-Item -ItemType Directory -Path "C:\Users\runneradmin\input","C:\Users\runneradmin\env","C:\Users\runneradmin\local","C:\Users\runneradmin\output","C:\Users\runneradmin\ws" -Force | Out-Null
          Invoke-WebRequest -Uri "${{ github.event.inputs.config }}" -OutFile "C:\Users\runneradmin\input\config.dgb" -ErrorAction SilentlyContinue

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Setup cloudflared
        shell: pwsh
        run: |
          Write-Output "Get Files"
          $cloudflared_cert = & "C:\dgb-reader.exe" cloudflared cert
          $cloudflared_config = & "C:\dgb-reader.exe" cloudflared config
          $cloudflared_tunnel = & "C:\dgb-reader.exe" cloudflared tunnel
          
          New-Item -ItemType Directory -Path "C:\Users\runneradmin\.cloudflared" -Force | Out-Null
          rclone copyto "$cloudflared_cert" "C:\Users\runneradmin\.cloudflared\cert.pem" || { Write-Error "Failed to copy cert.pem"; exit 1 }
          rclone copyto "$cloudflared_config" "C:\Users\runneradmin\.cloudflared\config.yml" || { Write-Error "Failed to copy config.yml"; exit 1 }
          rclone copyto "$cloudflared_tunnel" "C:\Users\runneradmin\.cloudflared\${{ secrets.TUNNEL_ID }}.json" || { Write-Error "Failed to copy tunnel.json"; exit 1 }

          Write-Output "Rename hostname"
          (Get-Content "C:\Users\runneradmin\.cloudflared\config.yml") -replace "test12341234\.freesites\.eu\.org", "ws-dgbaodev-$(& C:\dgb-reader.exe main id).freesites.eu.org" | Set-Content "C:\Users\runneradmin\.cloudflared\config.yml"

          cloudflared tunnel route dns websocket-dgbaodev "ws-dgbaodev-$(& C:\dgb-reader.exe main id).freesites.eu.org" | Out-Null

          Start-Process -NoNewWindow -FilePath "cloudflared.exe" `
                        -ArgumentList "tunnel", "run", "websocket-dgbaodev" `
                        -RedirectStandardOutput "C:\Users\runneradmin\output\cloudflared_stdout.log" `
                        -RedirectStandardError "C:\Users\runneradmin\output\cloudflared_stderr.log" `

      - name: Init Programs
        timeout-minutes: 10
        shell: pwsh
        env:
          RUNNER_CLONE_USERNAME: runner_clone
          RUNNER_CLONE_PASSWORD: R@admin1234
        run: |
          New-Item -ItemType File -Path "C:\Users\runneradmin\output\script.output.log","C:\Users\runneradmin\output\ws.log","C:\Users\runneradmin\output\init_ws.log","C:\Users\runneradmin\output\init_stdout_log.log","C:\Users\runneradmin\output\init_stderr_log.log" -Force | Out-Null
          $RunnerCloneUsername = $env:RUNNER_CLONE_USERNAME
          $RunnerClonePasswd = $env:RUNNER_CLONE_PASSWORD
          if (-not (Get-LocalUser -Name "$RunnerCloneUsername" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $RunnerCloneUsername -Password (ConvertTo-SecureString "$RunnerClonePasswd" -AsPlainText -Force) -FullName "Runner" -Description "CRunner"
            Add-LocalGroupMember -Group "Users" -Member $RunnerCloneUsername
          }
          New-Item -ItemType Directory -Path "C:\runner" -Force | Out-Null
          icacls "C:\runner" /grant "${RunnerCloneUsername}:(OI)(CI)F" /T

          Set-Location -Path "C:\runner"
          foreach ($pkg in (& "C:\dgb-reader.exe" init choco packages)) {
            choco install $pkg -y
          }

          rclone copyto "$( & "C:\dgb-reader.exe" runner script init )" "C:\Users\runneradmin\init.ps1" || { Write-Error "Failed to copy init.ps1"; exit 1 }
          rclone copyto "$( & "C:\dgb-reader.exe" runner script script )" "C:\runner\script.ps1" || { Write-Error "Failed to copy script.ps1"; exit 1 }
          icacls "C:\runner\script.ps1" /grant "runner_clone:(R,W)" 
          
          Start-Process -NoNewWindow -FilePath "powershell.exe" `
            -ArgumentList "-ExecutionPolicy Bypass -File C:\Users\runneradmin\init.ps1" `
            -RedirectStandardOutput "C:\Users\runneradmin\output\init_stdout_log.log" `
            -RedirectStandardError "C:\Users\runneradmin\output\init_stderr_log.log"

      - name: Init WS
        shell: pwsh
        run: |
          Set-Location -Path "C:\Users\runneradmin\ws"
          npm init -y
          $packageJsonPath = "C:\Users\runneradmin\ws\package.json"
          $package = Get-Content $packageJsonPath -Raw | ConvertFrom-Json
          $package.name = "dgbaodev-windows-ws"
          $package | ConvertTo-Json -Depth 10 | Set-Content $packageJsonPath
          npm install ws jsonwebtoken dotenv uuid winston

          $ID = & "C:\dgb-reader.exe" main id
          $Auth_Callback_Config = & "C:\dgb-reader.exe" return callback auth
          $COMMAND = & "C:\dgb-reader.exe" runner script command
          $CallBack = & "C:\dgb-reader.exe" return callback program
          
          rclone copyto "$CallBack" "C:\Users\runneradmin\input\callback.js"
          rclone copyto "$Auth_Callback_Config" "C:\Users\runneradmin\output\auth_config.dgb"
          Add-Content -Path "C:\Users\runneradmin\output\auth_config.dgb" -Value "WS=wss://ws-dgbaodev-$ID.freesites.eu.org"
          Move-Item "C:\Users\runneradmin\output\auth_config.dgb" "C:\Users\runneradmin\ws\config.dgb"
          Move-Item "C:\Users\runneradmin\input\callback.js" "C:\Users\runneradmin\ws\callback.js"

          rclone copyto "$( & "C:\dgb-reader.exe" auth program )" "C:\Users\runneradmin\ws\generate_token.js"

          New-Item -ItemType File -Path "C:\Users\runneradmin\ws\.env" -Force | Out-Null
          Add-Content -Path "C:\Users\runneradmin\ws\.env" -Value "JWT_SECRET=$( & "C:\dgb-reader.exe" auth secret )"
          Add-Content -Path "C:\Users\runneradmin\ws\.env" -Value "USERID=$( & "C:\dgb-reader.exe" auth uid )"
          Add-Content -Path "C:\Users\runneradmin\ws\.env" -Value "USERNAME=$( & "C:\dgb-reader.exe" auth username )"
          Add-Content -Path "C:\Users\runneradmin\ws\.env" -Value "ROLE=$( & "C:\dgb-reader.exe" auth role )"
          Add-Content -Path "C:\Users\runneradmin\ws\.env" -Value "ID=$ID"
          Add-Content -Path "C:\Users\runneradmin\ws\.env" -Value "PORT=9999"
          Add-Content -Path "C:\Users\runneradmin\ws\.env" -Value "COMMAND=\"$COMMAND\""
          Start-Process -NoNewWindow -FilePath "node.exe" -ArgumentList "C:\Users\runneradmin\ws\generate_token.js"
          rclone copyto "C:\Users\runneradmin\ws\config.dgb" "$Auth_Callback_Config"

      - name: Run Programs With WS
        shell: pwsh
        run: |
          if (!(Get-Process -Id (Get-Content "C:\Users\runneradmin\cloudflared.pid") -ErrorAction SilentlyContinue)) {
            Write-Error "Cloudflared tunnel failed to start"
            exit 1
          }
          Set-Location -Path "C:\Users\runneradmin\ws"
          Start-Process -NoNewWindow -FilePath "node.exe" -ArgumentList "C:\Users\runneradmin\ws\callback.js"

      - name: Post Log
        if: always()
        shell: pwsh
        run: |
          rclone copyto "C:\Users\runneradmin\output\cloudflared_stdout.log" "$( & "C:\dgb-reader.exe" debug log )\$( & "C:\dgb-reader.exe" main id )_cloudflared_stdout.log"
          rclone copyto "C:\Users\runneradmin\output\cloudflared_stderr.log" "$( & "C:\dgb-reader.exe" debug log )\$( & "C:\dgb-reader.exe" main id )_cloudflared_stderr.log"
          rclone copyto "C:\Users\runneradmin\output\init_stdout_log.log" "$( & "C:\dgb-reader.exe" runner script init_stdout_log )"
          rclone copyto "C:\Users\runneradmin\output\init_stderr_log.log" "$( & "C:\dgb-reader.exe" runner script init_stderr_log )"
          rclone copyto "C:\Users\runneradmin\output\script.output.log" "$( & "C:\dgb-reader.exe" runner script log )\output.log"
          rclone copyto "C:\Users\runneradmin\output\ws.log" "$( & "C:\dgb-reader.exe" runner script log )\ws.log"
          rclone copyto "C:\Users\runneradmin\output\init_ws.log" "$( & "C:\dgb-reader.exe" runner script log )\init_ws.log"
